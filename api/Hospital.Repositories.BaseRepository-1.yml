### YamlMime:ManagedReference
items:
- uid: Hospital.Repositories.BaseRepository`1
  commentId: T:Hospital.Repositories.BaseRepository`1
  id: BaseRepository`1
  parent: Hospital.Repositories
  children:
  - Hospital.Repositories.BaseRepository`1.#ctor(System.String)
  - Hospital.Repositories.BaseRepository`1.CreateAsync(`0)
  - Hospital.Repositories.BaseRepository`1.DeleteAsync(System.String)
  - Hospital.Repositories.BaseRepository`1.DeleteByIdAsync(System.String)
  - Hospital.Repositories.BaseRepository`1.GetAllAsync
  - Hospital.Repositories.BaseRepository`1.GetByIdAsync(System.String)
  - Hospital.Repositories.BaseRepository`1.UpdateAsync(System.String,`0)
  - Hospital.Repositories.BaseRepository`1.baseUrl
  - Hospital.Repositories.BaseRepository`1.client
  - Hospital.Repositories.BaseRepository`1.jsonOptions
  langs:
  - csharp
  - vb
  name: BaseRepository<T>
  nameWithType: BaseRepository<T>
  fullName: Hospital.Repositories.BaseRepository<T>
  type: Class
  source:
    id: BaseRepository
    path: /home/Coder/Escritorio/Assetment_Desarollo/PruebaJuanGuzman/Repositories/BaseRepository.cs
    startLine: 12
  assemblies:
  - PruebaJuanGuzman
  namespace: Hospital.Repositories
  summary: >-
    Base repository class for performing CRUD operations on entities of type <code class="typeparamref">T</code>.

    Provides methods for creating, reading, updating, and deleting records in a remote database.
  example: []
  syntax:
    content: 'public abstract class BaseRepository<T> : IRepository<T>'
    typeParameters:
    - id: T
      description: The type of the entity being managed (e.g., Patient, Doctor, Appointment).
    content.vb: Public MustInherit Class BaseRepository(Of T) Implements IRepository(Of T)
  inheritance:
  - System.Object
  derivedClasses:
  - Hospital.Repositories.AppointmentRepository
  - Hospital.Repositories.DoctorRepository
  - Hospital.Repositories.EmailRepository
  - Hospital.Repositories.PatientRepository
  - Hospital.Repositories.UserRepository
  implements:
  - Hospital.Interfaces.IRepository{{T}}
  inheritedMembers:
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
  nameWithType.vb: BaseRepository(Of T)
  fullName.vb: Hospital.Repositories.BaseRepository(Of T)
  name.vb: BaseRepository(Of T)
- uid: Hospital.Repositories.BaseRepository`1.client
  commentId: F:Hospital.Repositories.BaseRepository`1.client
  id: client
  parent: Hospital.Repositories.BaseRepository`1
  langs:
  - csharp
  - vb
  name: client
  nameWithType: BaseRepository<T>.client
  fullName: Hospital.Repositories.BaseRepository<T>.client
  type: Field
  source:
    id: client
    path: /home/Coder/Escritorio/Assetment_Desarollo/PruebaJuanGuzman/Repositories/BaseRepository.cs
    startLine: 17
  assemblies:
  - PruebaJuanGuzman
  namespace: Hospital.Repositories
  summary: The <xref href="System.Net.Http.HttpClient" data-throw-if-not-resolved="false"></xref> used for sending HTTP requests.
  example: []
  syntax:
    content: protected readonly HttpClient client
    return:
      type: System.Net.Http.HttpClient
    content.vb: Protected ReadOnly client As HttpClient
  nameWithType.vb: BaseRepository(Of T).client
  fullName.vb: Hospital.Repositories.BaseRepository(Of T).client
- uid: Hospital.Repositories.BaseRepository`1.jsonOptions
  commentId: F:Hospital.Repositories.BaseRepository`1.jsonOptions
  id: jsonOptions
  parent: Hospital.Repositories.BaseRepository`1
  langs:
  - csharp
  - vb
  name: jsonOptions
  nameWithType: BaseRepository<T>.jsonOptions
  fullName: Hospital.Repositories.BaseRepository<T>.jsonOptions
  type: Field
  source:
    id: jsonOptions
    path: /home/Coder/Escritorio/Assetment_Desarollo/PruebaJuanGuzman/Repositories/BaseRepository.cs
    startLine: 22
  assemblies:
  - PruebaJuanGuzman
  namespace: Hospital.Repositories
  summary: The options used for serializing and deserializing JSON data.
  example: []
  syntax:
    content: protected readonly JsonSerializerOptions jsonOptions
    return:
      type: System.Text.Json.JsonSerializerOptions
    content.vb: Protected ReadOnly jsonOptions As JsonSerializerOptions
  nameWithType.vb: BaseRepository(Of T).jsonOptions
  fullName.vb: Hospital.Repositories.BaseRepository(Of T).jsonOptions
- uid: Hospital.Repositories.BaseRepository`1.baseUrl
  commentId: F:Hospital.Repositories.BaseRepository`1.baseUrl
  id: baseUrl
  parent: Hospital.Repositories.BaseRepository`1
  langs:
  - csharp
  - vb
  name: baseUrl
  nameWithType: BaseRepository<T>.baseUrl
  fullName: Hospital.Repositories.BaseRepository<T>.baseUrl
  type: Field
  source:
    id: baseUrl
    path: /home/Coder/Escritorio/Assetment_Desarollo/PruebaJuanGuzman/Repositories/BaseRepository.cs
    startLine: 27
  assemblies:
  - PruebaJuanGuzman
  namespace: Hospital.Repositories
  summary: The base URL of the resource in the remote database.
  example: []
  syntax:
    content: protected readonly string baseUrl
    return:
      type: System.String
    content.vb: Protected ReadOnly baseUrl As String
  nameWithType.vb: BaseRepository(Of T).baseUrl
  fullName.vb: Hospital.Repositories.BaseRepository(Of T).baseUrl
- uid: Hospital.Repositories.BaseRepository`1.#ctor(System.String)
  commentId: M:Hospital.Repositories.BaseRepository`1.#ctor(System.String)
  id: '#ctor(System.String)'
  parent: Hospital.Repositories.BaseRepository`1
  langs:
  - csharp
  - vb
  name: BaseRepository(string)
  nameWithType: BaseRepository<T>.BaseRepository(string)
  fullName: Hospital.Repositories.BaseRepository<T>.BaseRepository(string)
  type: Constructor
  source:
    id: .ctor
    path: /home/Coder/Escritorio/Assetment_Desarollo/PruebaJuanGuzman/Repositories/BaseRepository.cs
    startLine: 33
  assemblies:
  - PruebaJuanGuzman
  namespace: Hospital.Repositories
  summary: Initializes a new instance of the <xref href="Hospital.Repositories.BaseRepository%601" data-throw-if-not-resolved="false"></xref> class.
  example: []
  syntax:
    content: protected BaseRepository(string baseUrl)
    parameters:
    - id: baseUrl
      type: System.String
      description: The base URL of the resource in the database.
    content.vb: Protected Sub New(baseUrl As String)
  overload: Hospital.Repositories.BaseRepository`1.#ctor*
  nameWithType.vb: BaseRepository(Of T).New(String)
  fullName.vb: Hospital.Repositories.BaseRepository(Of T).New(String)
  name.vb: New(String)
- uid: Hospital.Repositories.BaseRepository`1.CreateAsync(`0)
  commentId: M:Hospital.Repositories.BaseRepository`1.CreateAsync(`0)
  id: CreateAsync(`0)
  parent: Hospital.Repositories.BaseRepository`1
  langs:
  - csharp
  - vb
  name: CreateAsync(T)
  nameWithType: BaseRepository<T>.CreateAsync(T)
  fullName: Hospital.Repositories.BaseRepository<T>.CreateAsync(T)
  type: Method
  source:
    id: CreateAsync
    path: /home/Coder/Escritorio/Assetment_Desarollo/PruebaJuanGuzman/Repositories/BaseRepository.cs
    startLine: 51
  assemblies:
  - PruebaJuanGuzman
  namespace: Hospital.Repositories
  summary: Creates a new entity in the database.
  example: []
  syntax:
    content: public virtual Task<string> CreateAsync(T entity)
    parameters:
    - id: entity
      type: '{T}'
      description: The entity to create.
    return:
      type: System.Threading.Tasks.Task{System.String}
      description: The ID of the created entity.
    content.vb: Public Overridable Function CreateAsync(entity As T) As Task(Of String)
  overload: Hospital.Repositories.BaseRepository`1.CreateAsync*
  implements:
  - Hospital.Interfaces.IRepository{{T}}.CreateAsync({T})
  nameWithType.vb: BaseRepository(Of T).CreateAsync(T)
  fullName.vb: Hospital.Repositories.BaseRepository(Of T).CreateAsync(T)
- uid: Hospital.Repositories.BaseRepository`1.GetAllAsync
  commentId: M:Hospital.Repositories.BaseRepository`1.GetAllAsync
  id: GetAllAsync
  parent: Hospital.Repositories.BaseRepository`1
  langs:
  - csharp
  - vb
  name: GetAllAsync()
  nameWithType: BaseRepository<T>.GetAllAsync()
  fullName: Hospital.Repositories.BaseRepository<T>.GetAllAsync()
  type: Method
  source:
    id: GetAllAsync
    path: /home/Coder/Escritorio/Assetment_Desarollo/PruebaJuanGuzman/Repositories/BaseRepository.cs
    startLine: 89
  assemblies:
  - PruebaJuanGuzman
  namespace: Hospital.Repositories
  summary: Retrieves all records of type <code class="typeparamref">T</code> from the database.
  example: []
  syntax:
    content: public virtual Task<Dictionary<string, T>> GetAllAsync()
    return:
      type: System.Threading.Tasks.Task{System.Collections.Generic.Dictionary{System.String,{T}}}
      description: A dictionary of records indexed by their ID.
    content.vb: Public Overridable Function GetAllAsync() As Task(Of Dictionary(Of String, T))
  overload: Hospital.Repositories.BaseRepository`1.GetAllAsync*
  implements:
  - Hospital.Interfaces.IRepository{{T}}.GetAllAsync
  nameWithType.vb: BaseRepository(Of T).GetAllAsync()
  fullName.vb: Hospital.Repositories.BaseRepository(Of T).GetAllAsync()
- uid: Hospital.Repositories.BaseRepository`1.GetByIdAsync(System.String)
  commentId: M:Hospital.Repositories.BaseRepository`1.GetByIdAsync(System.String)
  id: GetByIdAsync(System.String)
  parent: Hospital.Repositories.BaseRepository`1
  langs:
  - csharp
  - vb
  name: GetByIdAsync(string)
  nameWithType: BaseRepository<T>.GetByIdAsync(string)
  fullName: Hospital.Repositories.BaseRepository<T>.GetByIdAsync(string)
  type: Method
  source:
    id: GetByIdAsync
    path: /home/Coder/Escritorio/Assetment_Desarollo/PruebaJuanGuzman/Repositories/BaseRepository.cs
    startLine: 106
  assemblies:
  - PruebaJuanGuzman
  namespace: Hospital.Repositories
  summary: Retrieves a record by its ID from the database.
  example: []
  syntax:
    content: public virtual Task<T> GetByIdAsync(string id)
    parameters:
    - id: id
      type: System.String
      description: The ID of the record to retrieve.
    return:
      type: System.Threading.Tasks.Task{{T}}
      description: The entity with the specified ID.
    content.vb: Public Overridable Function GetByIdAsync(id As String) As Task(Of T)
  overload: Hospital.Repositories.BaseRepository`1.GetByIdAsync*
  implements:
  - Hospital.Interfaces.IRepository{{T}}.GetByIdAsync(System.String)
  nameWithType.vb: BaseRepository(Of T).GetByIdAsync(String)
  fullName.vb: Hospital.Repositories.BaseRepository(Of T).GetByIdAsync(String)
  name.vb: GetByIdAsync(String)
- uid: Hospital.Repositories.BaseRepository`1.UpdateAsync(System.String,`0)
  commentId: M:Hospital.Repositories.BaseRepository`1.UpdateAsync(System.String,`0)
  id: UpdateAsync(System.String,`0)
  parent: Hospital.Repositories.BaseRepository`1
  langs:
  - csharp
  - vb
  name: UpdateAsync(string, T)
  nameWithType: BaseRepository<T>.UpdateAsync(string, T)
  fullName: Hospital.Repositories.BaseRepository<T>.UpdateAsync(string, T)
  type: Method
  source:
    id: UpdateAsync
    path: /home/Coder/Escritorio/Assetment_Desarollo/PruebaJuanGuzman/Repositories/BaseRepository.cs
    startLine: 118
  assemblies:
  - PruebaJuanGuzman
  namespace: Hospital.Repositories
  summary: Updates an existing entity in the database.
  example: []
  syntax:
    content: public virtual Task UpdateAsync(string id, T entity)
    parameters:
    - id: id
      type: System.String
      description: The ID of the entity to update.
    - id: entity
      type: '{T}'
      description: The updated entity.
    return:
      type: System.Threading.Tasks.Task
    content.vb: Public Overridable Function UpdateAsync(id As String, entity As T) As Task
  overload: Hospital.Repositories.BaseRepository`1.UpdateAsync*
  implements:
  - Hospital.Interfaces.IRepository{{T}}.UpdateAsync(System.String,{T})
  nameWithType.vb: BaseRepository(Of T).UpdateAsync(String, T)
  fullName.vb: Hospital.Repositories.BaseRepository(Of T).UpdateAsync(String, T)
  name.vb: UpdateAsync(String, T)
- uid: Hospital.Repositories.BaseRepository`1.DeleteAsync(System.String)
  commentId: M:Hospital.Repositories.BaseRepository`1.DeleteAsync(System.String)
  id: DeleteAsync(System.String)
  parent: Hospital.Repositories.BaseRepository`1
  langs:
  - csharp
  - vb
  name: DeleteAsync(string)
  nameWithType: BaseRepository<T>.DeleteAsync(string)
  fullName: Hospital.Repositories.BaseRepository<T>.DeleteAsync(string)
  type: Method
  source:
    id: DeleteAsync
    path: /home/Coder/Escritorio/Assetment_Desarollo/PruebaJuanGuzman/Repositories/BaseRepository.cs
    startLine: 139
  assemblies:
  - PruebaJuanGuzman
  namespace: Hospital.Repositories
  summary: Deletes a record by its name (optional, use only if entity has Name property).
  example: []
  syntax:
    content: public virtual Task DeleteAsync(string name)
    parameters:
    - id: name
      type: System.String
      description: The name of the record to delete.
    return:
      type: System.Threading.Tasks.Task
    content.vb: Public Overridable Function DeleteAsync(name As String) As Task
  overload: Hospital.Repositories.BaseRepository`1.DeleteAsync*
  implements:
  - Hospital.Interfaces.IRepository{{T}}.DeleteAsync(System.String)
  nameWithType.vb: BaseRepository(Of T).DeleteAsync(String)
  fullName.vb: Hospital.Repositories.BaseRepository(Of T).DeleteAsync(String)
  name.vb: DeleteAsync(String)
- uid: Hospital.Repositories.BaseRepository`1.DeleteByIdAsync(System.String)
  commentId: M:Hospital.Repositories.BaseRepository`1.DeleteByIdAsync(System.String)
  id: DeleteByIdAsync(System.String)
  parent: Hospital.Repositories.BaseRepository`1
  langs:
  - csharp
  - vb
  name: DeleteByIdAsync(string)
  nameWithType: BaseRepository<T>.DeleteByIdAsync(string)
  fullName: Hospital.Repositories.BaseRepository<T>.DeleteByIdAsync(string)
  type: Method
  source:
    id: DeleteByIdAsync
    path: /home/Coder/Escritorio/Assetment_Desarollo/PruebaJuanGuzman/Repositories/BaseRepository.cs
    startLine: 173
  assemblies:
  - PruebaJuanGuzman
  namespace: Hospital.Repositories
  summary: Deletes a record by its ID from the database.
  example: []
  syntax:
    content: public virtual Task DeleteByIdAsync(string id)
    parameters:
    - id: id
      type: System.String
      description: The ID of the record to delete.
    return:
      type: System.Threading.Tasks.Task
    content.vb: Public Overridable Function DeleteByIdAsync(id As String) As Task
  overload: Hospital.Repositories.BaseRepository`1.DeleteByIdAsync*
  nameWithType.vb: BaseRepository(Of T).DeleteByIdAsync(String)
  fullName.vb: Hospital.Repositories.BaseRepository(Of T).DeleteByIdAsync(String)
  name.vb: DeleteByIdAsync(String)
references:
- uid: Hospital.Repositories
  commentId: N:Hospital.Repositories
  href: Hospital.html
  name: Hospital.Repositories
  nameWithType: Hospital.Repositories
  fullName: Hospital.Repositories
  spec.csharp:
  - uid: Hospital
    name: Hospital
    href: Hospital.html
  - name: .
  - uid: Hospital.Repositories
    name: Repositories
    href: Hospital.Repositories.html
  spec.vb:
  - uid: Hospital
    name: Hospital
    href: Hospital.html
  - name: .
  - uid: Hospital.Repositories
    name: Repositories
    href: Hospital.Repositories.html
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object
  name: object
  nameWithType: object
  fullName: object
  nameWithType.vb: Object
  fullName.vb: Object
  name.vb: Object
- uid: Hospital.Interfaces.IRepository{{T}}
  commentId: T:Hospital.Interfaces.IRepository{`0}
  parent: Hospital.Interfaces
  definition: Hospital.Interfaces.IRepository`1
  href: Hospital.Interfaces.IRepository-1.html
  name: IRepository<T>
  nameWithType: IRepository<T>
  fullName: Hospital.Interfaces.IRepository<T>
  nameWithType.vb: IRepository(Of T)
  fullName.vb: Hospital.Interfaces.IRepository(Of T)
  name.vb: IRepository(Of T)
  spec.csharp:
  - uid: Hospital.Interfaces.IRepository`1
    name: IRepository
    href: Hospital.Interfaces.IRepository-1.html
  - name: <
  - name: T
  - name: '>'
  spec.vb:
  - uid: Hospital.Interfaces.IRepository`1
    name: IRepository
    href: Hospital.Interfaces.IRepository-1.html
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object)
  name: Equals(object)
  nameWithType: object.Equals(object)
  fullName: object.Equals(object)
  nameWithType.vb: Object.Equals(Object)
  fullName.vb: Object.Equals(Object)
  name.vb: Equals(Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object)
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object)
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object-system-object)
  name: Equals(object, object)
  nameWithType: object.Equals(object, object)
  fullName: object.Equals(object, object)
  nameWithType.vb: Object.Equals(Object, Object)
  fullName.vb: Object.Equals(Object, Object)
  name.vb: Equals(Object, Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object-system-object)
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object-system-object)
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.gethashcode
  name: GetHashCode()
  nameWithType: object.GetHashCode()
  fullName: object.GetHashCode()
  nameWithType.vb: Object.GetHashCode()
  fullName.vb: Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gethashcode
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gethashcode
  - name: (
  - name: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.gettype
  name: GetType()
  nameWithType: object.GetType()
  fullName: object.GetType()
  nameWithType.vb: Object.GetType()
  fullName.vb: Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gettype
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gettype
  - name: (
  - name: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.memberwiseclone
  name: MemberwiseClone()
  nameWithType: object.MemberwiseClone()
  fullName: object.MemberwiseClone()
  nameWithType.vb: Object.MemberwiseClone()
  fullName.vb: Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.memberwiseclone
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.memberwiseclone
  - name: (
  - name: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.referenceequals
  name: ReferenceEquals(object, object)
  nameWithType: object.ReferenceEquals(object, object)
  fullName: object.ReferenceEquals(object, object)
  nameWithType.vb: Object.ReferenceEquals(Object, Object)
  fullName.vb: Object.ReferenceEquals(Object, Object)
  name.vb: ReferenceEquals(Object, Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.referenceequals
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.referenceequals
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.tostring
  name: ToString()
  nameWithType: object.ToString()
  fullName: object.ToString()
  nameWithType.vb: Object.ToString()
  fullName.vb: Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.tostring
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.tostring
  - name: (
  - name: )
- uid: System
  commentId: N:System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system
  name: System
  nameWithType: System
  fullName: System
- uid: Hospital.Interfaces.IRepository`1
  commentId: T:Hospital.Interfaces.IRepository`1
  href: Hospital.Interfaces.IRepository-1.html
  name: IRepository<T>
  nameWithType: IRepository<T>
  fullName: Hospital.Interfaces.IRepository<T>
  nameWithType.vb: IRepository(Of T)
  fullName.vb: Hospital.Interfaces.IRepository(Of T)
  name.vb: IRepository(Of T)
  spec.csharp:
  - uid: Hospital.Interfaces.IRepository`1
    name: IRepository
    href: Hospital.Interfaces.IRepository-1.html
  - name: <
  - name: T
  - name: '>'
  spec.vb:
  - uid: Hospital.Interfaces.IRepository`1
    name: IRepository
    href: Hospital.Interfaces.IRepository-1.html
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
- uid: Hospital.Interfaces
  commentId: N:Hospital.Interfaces
  href: Hospital.html
  name: Hospital.Interfaces
  nameWithType: Hospital.Interfaces
  fullName: Hospital.Interfaces
  spec.csharp:
  - uid: Hospital
    name: Hospital
    href: Hospital.html
  - name: .
  - uid: Hospital.Interfaces
    name: Interfaces
    href: Hospital.Interfaces.html
  spec.vb:
  - uid: Hospital
    name: Hospital
    href: Hospital.html
  - name: .
  - uid: Hospital.Interfaces
    name: Interfaces
    href: Hospital.Interfaces.html
- uid: System.Net.Http.HttpClient
  commentId: T:System.Net.Http.HttpClient
  parent: System.Net.Http
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.net.http.httpclient
  name: HttpClient
  nameWithType: HttpClient
  fullName: System.Net.Http.HttpClient
- uid: System.Net.Http
  commentId: N:System.Net.Http
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system
  name: System.Net.Http
  nameWithType: System.Net.Http
  fullName: System.Net.Http
  spec.csharp:
  - uid: System
    name: System
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system
  - name: .
  - uid: System.Net
    name: Net
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.net
  - name: .
  - uid: System.Net.Http
    name: Http
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.net.http
  spec.vb:
  - uid: System
    name: System
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system
  - name: .
  - uid: System.Net
    name: Net
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.net
  - name: .
  - uid: System.Net.Http
    name: Http
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.net.http
- uid: System.Text.Json.JsonSerializerOptions
  commentId: T:System.Text.Json.JsonSerializerOptions
  parent: System.Text.Json
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.text.json.jsonserializeroptions
  name: JsonSerializerOptions
  nameWithType: JsonSerializerOptions
  fullName: System.Text.Json.JsonSerializerOptions
- uid: System.Text.Json
  commentId: N:System.Text.Json
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system
  name: System.Text.Json
  nameWithType: System.Text.Json
  fullName: System.Text.Json
  spec.csharp:
  - uid: System
    name: System
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system
  - name: .
  - uid: System.Text
    name: Text
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.text
  - name: .
  - uid: System.Text.Json
    name: Json
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.text.json
  spec.vb:
  - uid: System
    name: System
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system
  - name: .
  - uid: System.Text
    name: Text
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.text
  - name: .
  - uid: System.Text.Json
    name: Json
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.text.json
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.string
  name: string
  nameWithType: string
  fullName: string
  nameWithType.vb: String
  fullName.vb: String
  name.vb: String
- uid: Hospital.Repositories.BaseRepository`1
  commentId: T:Hospital.Repositories.BaseRepository`1
  href: Hospital.Repositories.BaseRepository-1.html
  name: BaseRepository<T>
  nameWithType: BaseRepository<T>
  fullName: Hospital.Repositories.BaseRepository<T>
  nameWithType.vb: BaseRepository(Of T)
  fullName.vb: Hospital.Repositories.BaseRepository(Of T)
  name.vb: BaseRepository(Of T)
  spec.csharp:
  - uid: Hospital.Repositories.BaseRepository`1
    name: BaseRepository
    href: Hospital.Repositories.BaseRepository-1.html
  - name: <
  - name: T
  - name: '>'
  spec.vb:
  - uid: Hospital.Repositories.BaseRepository`1
    name: BaseRepository
    href: Hospital.Repositories.BaseRepository-1.html
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
- uid: Hospital.Repositories.BaseRepository`1.#ctor*
  commentId: Overload:Hospital.Repositories.BaseRepository`1.#ctor
  href: Hospital.Repositories.BaseRepository-1.html#Hospital_Repositories_BaseRepository_1__ctor_System_String_
  name: BaseRepository
  nameWithType: BaseRepository<T>.BaseRepository
  fullName: Hospital.Repositories.BaseRepository<T>.BaseRepository
  nameWithType.vb: BaseRepository(Of T).New
  fullName.vb: Hospital.Repositories.BaseRepository(Of T).New
  name.vb: New
- uid: Hospital.Repositories.BaseRepository`1.CreateAsync*
  commentId: Overload:Hospital.Repositories.BaseRepository`1.CreateAsync
  href: Hospital.Repositories.BaseRepository-1.html#Hospital_Repositories_BaseRepository_1_CreateAsync__0_
  name: CreateAsync
  nameWithType: BaseRepository<T>.CreateAsync
  fullName: Hospital.Repositories.BaseRepository<T>.CreateAsync
  nameWithType.vb: BaseRepository(Of T).CreateAsync
  fullName.vb: Hospital.Repositories.BaseRepository(Of T).CreateAsync
- uid: Hospital.Interfaces.IRepository{{T}}.CreateAsync({T})
  commentId: M:Hospital.Interfaces.IRepository{`0}.CreateAsync(`0)
  parent: Hospital.Interfaces.IRepository{{T}}
  definition: Hospital.Interfaces.IRepository`1.CreateAsync(`0)
  href: Hospital.Interfaces.IRepository-1.html#Hospital_Interfaces_IRepository_1_CreateAsync__0_
  name: CreateAsync(T)
  nameWithType: IRepository<T>.CreateAsync(T)
  fullName: Hospital.Interfaces.IRepository<T>.CreateAsync(T)
  nameWithType.vb: IRepository(Of T).CreateAsync(T)
  fullName.vb: Hospital.Interfaces.IRepository(Of T).CreateAsync(T)
  spec.csharp:
  - uid: Hospital.Interfaces.IRepository{`0}.CreateAsync(`0)
    name: CreateAsync
    href: Hospital.Interfaces.IRepository-1.html#Hospital_Interfaces_IRepository_1_CreateAsync__0_
  - name: (
  - name: T
  - name: )
  spec.vb:
  - uid: Hospital.Interfaces.IRepository{`0}.CreateAsync(`0)
    name: CreateAsync
    href: Hospital.Interfaces.IRepository-1.html#Hospital_Interfaces_IRepository_1_CreateAsync__0_
  - name: (
  - name: T
  - name: )
- uid: '{T}'
  commentId: '!:T'
  definition: T
  name: T
  nameWithType: T
  fullName: T
- uid: System.Threading.Tasks.Task{System.String}
  commentId: T:System.Threading.Tasks.Task{System.String}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  name: Task<string>
  nameWithType: Task<string>
  fullName: System.Threading.Tasks.Task<string>
  nameWithType.vb: Task(Of String)
  fullName.vb: System.Threading.Tasks.Task(Of String)
  name.vb: Task(Of String)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  - name: <
  - uid: System.String
    name: string
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.string
  - name: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  - name: (
  - name: Of
  - name: " "
  - uid: System.String
    name: String
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.string
  - name: )
- uid: Hospital.Interfaces.IRepository`1.CreateAsync(`0)
  commentId: M:Hospital.Interfaces.IRepository`1.CreateAsync(`0)
  href: Hospital.Interfaces.IRepository-1.html#Hospital_Interfaces_IRepository_1_CreateAsync__0_
  name: CreateAsync(T)
  nameWithType: IRepository<T>.CreateAsync(T)
  fullName: Hospital.Interfaces.IRepository<T>.CreateAsync(T)
  nameWithType.vb: IRepository(Of T).CreateAsync(T)
  fullName.vb: Hospital.Interfaces.IRepository(Of T).CreateAsync(T)
  spec.csharp:
  - uid: Hospital.Interfaces.IRepository`1.CreateAsync(`0)
    name: CreateAsync
    href: Hospital.Interfaces.IRepository-1.html#Hospital_Interfaces_IRepository_1_CreateAsync__0_
  - name: (
  - name: T
  - name: )
  spec.vb:
  - uid: Hospital.Interfaces.IRepository`1.CreateAsync(`0)
    name: CreateAsync
    href: Hospital.Interfaces.IRepository-1.html#Hospital_Interfaces_IRepository_1_CreateAsync__0_
  - name: (
  - name: T
  - name: )
- uid: T
  name: T
  nameWithType: T
  fullName: T
- uid: System.Threading.Tasks.Task`1
  commentId: T:System.Threading.Tasks.Task`1
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  name: Task<TResult>
  nameWithType: Task<TResult>
  fullName: System.Threading.Tasks.Task<TResult>
  nameWithType.vb: Task(Of TResult)
  fullName.vb: System.Threading.Tasks.Task(Of TResult)
  name.vb: Task(Of TResult)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  - name: <
  - name: TResult
  - name: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  - name: (
  - name: Of
  - name: " "
  - name: TResult
  - name: )
- uid: System.Threading.Tasks
  commentId: N:System.Threading.Tasks
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system
  name: System.Threading.Tasks
  nameWithType: System.Threading.Tasks
  fullName: System.Threading.Tasks
  spec.csharp:
  - uid: System
    name: System
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system
  - name: .
  - uid: System.Threading
    name: Threading
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading
  - name: .
  - uid: System.Threading.Tasks
    name: Tasks
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.tasks
  spec.vb:
  - uid: System
    name: System
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system
  - name: .
  - uid: System.Threading
    name: Threading
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading
  - name: .
  - uid: System.Threading.Tasks
    name: Tasks
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.tasks
- uid: Hospital.Repositories.BaseRepository`1.GetAllAsync*
  commentId: Overload:Hospital.Repositories.BaseRepository`1.GetAllAsync
  href: Hospital.Repositories.BaseRepository-1.html#Hospital_Repositories_BaseRepository_1_GetAllAsync
  name: GetAllAsync
  nameWithType: BaseRepository<T>.GetAllAsync
  fullName: Hospital.Repositories.BaseRepository<T>.GetAllAsync
  nameWithType.vb: BaseRepository(Of T).GetAllAsync
  fullName.vb: Hospital.Repositories.BaseRepository(Of T).GetAllAsync
- uid: Hospital.Interfaces.IRepository{{T}}.GetAllAsync
  commentId: M:Hospital.Interfaces.IRepository{`0}.GetAllAsync
  parent: Hospital.Interfaces.IRepository{{T}}
  definition: Hospital.Interfaces.IRepository`1.GetAllAsync
  href: Hospital.Interfaces.IRepository-1.html#Hospital_Interfaces_IRepository_1_GetAllAsync
  name: GetAllAsync()
  nameWithType: IRepository<T>.GetAllAsync()
  fullName: Hospital.Interfaces.IRepository<T>.GetAllAsync()
  nameWithType.vb: IRepository(Of T).GetAllAsync()
  fullName.vb: Hospital.Interfaces.IRepository(Of T).GetAllAsync()
  spec.csharp:
  - uid: Hospital.Interfaces.IRepository{`0}.GetAllAsync
    name: GetAllAsync
    href: Hospital.Interfaces.IRepository-1.html#Hospital_Interfaces_IRepository_1_GetAllAsync
  - name: (
  - name: )
  spec.vb:
  - uid: Hospital.Interfaces.IRepository{`0}.GetAllAsync
    name: GetAllAsync
    href: Hospital.Interfaces.IRepository-1.html#Hospital_Interfaces_IRepository_1_GetAllAsync
  - name: (
  - name: )
- uid: System.Threading.Tasks.Task{System.Collections.Generic.Dictionary{System.String,{T}}}
  commentId: T:System.Threading.Tasks.Task{System.Collections.Generic.Dictionary{System.String,`0}}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  name: Task<Dictionary<string, T>>
  nameWithType: Task<Dictionary<string, T>>
  fullName: System.Threading.Tasks.Task<System.Collections.Generic.Dictionary<string, T>>
  nameWithType.vb: Task(Of Dictionary(Of String, T))
  fullName.vb: System.Threading.Tasks.Task(Of System.Collections.Generic.Dictionary(Of String, T))
  name.vb: Task(Of Dictionary(Of String, T))
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  - name: <
  - uid: System.Collections.Generic.Dictionary`2
    name: Dictionary
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.dictionary-2
  - name: <
  - uid: System.String
    name: string
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.string
  - name: ','
  - name: " "
  - name: T
  - name: '>'
  - name: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  - name: (
  - name: Of
  - name: " "
  - uid: System.Collections.Generic.Dictionary`2
    name: Dictionary
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.dictionary-2
  - name: (
  - name: Of
  - name: " "
  - uid: System.String
    name: String
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.string
  - name: ','
  - name: " "
  - name: T
  - name: )
  - name: )
- uid: Hospital.Interfaces.IRepository`1.GetAllAsync
  commentId: M:Hospital.Interfaces.IRepository`1.GetAllAsync
  href: Hospital.Interfaces.IRepository-1.html#Hospital_Interfaces_IRepository_1_GetAllAsync
  name: GetAllAsync()
  nameWithType: IRepository<T>.GetAllAsync()
  fullName: Hospital.Interfaces.IRepository<T>.GetAllAsync()
  nameWithType.vb: IRepository(Of T).GetAllAsync()
  fullName.vb: Hospital.Interfaces.IRepository(Of T).GetAllAsync()
  spec.csharp:
  - uid: Hospital.Interfaces.IRepository`1.GetAllAsync
    name: GetAllAsync
    href: Hospital.Interfaces.IRepository-1.html#Hospital_Interfaces_IRepository_1_GetAllAsync
  - name: (
  - name: )
  spec.vb:
  - uid: Hospital.Interfaces.IRepository`1.GetAllAsync
    name: GetAllAsync
    href: Hospital.Interfaces.IRepository-1.html#Hospital_Interfaces_IRepository_1_GetAllAsync
  - name: (
  - name: )
- uid: Hospital.Repositories.BaseRepository`1.GetByIdAsync*
  commentId: Overload:Hospital.Repositories.BaseRepository`1.GetByIdAsync
  href: Hospital.Repositories.BaseRepository-1.html#Hospital_Repositories_BaseRepository_1_GetByIdAsync_System_String_
  name: GetByIdAsync
  nameWithType: BaseRepository<T>.GetByIdAsync
  fullName: Hospital.Repositories.BaseRepository<T>.GetByIdAsync
  nameWithType.vb: BaseRepository(Of T).GetByIdAsync
  fullName.vb: Hospital.Repositories.BaseRepository(Of T).GetByIdAsync
- uid: Hospital.Interfaces.IRepository{{T}}.GetByIdAsync(System.String)
  commentId: M:Hospital.Interfaces.IRepository{`0}.GetByIdAsync(System.String)
  parent: Hospital.Interfaces.IRepository{{T}}
  definition: Hospital.Interfaces.IRepository`1.GetByIdAsync(System.String)
  href: Hospital.Interfaces.IRepository-1.html#Hospital_Interfaces_IRepository_1_GetByIdAsync_System_String_
  name: GetByIdAsync(string)
  nameWithType: IRepository<T>.GetByIdAsync(string)
  fullName: Hospital.Interfaces.IRepository<T>.GetByIdAsync(string)
  nameWithType.vb: IRepository(Of T).GetByIdAsync(String)
  fullName.vb: Hospital.Interfaces.IRepository(Of T).GetByIdAsync(String)
  name.vb: GetByIdAsync(String)
  spec.csharp:
  - uid: Hospital.Interfaces.IRepository{`0}.GetByIdAsync(System.String)
    name: GetByIdAsync
    href: Hospital.Interfaces.IRepository-1.html#Hospital_Interfaces_IRepository_1_GetByIdAsync_System_String_
  - name: (
  - uid: System.String
    name: string
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.string
  - name: )
  spec.vb:
  - uid: Hospital.Interfaces.IRepository{`0}.GetByIdAsync(System.String)
    name: GetByIdAsync
    href: Hospital.Interfaces.IRepository-1.html#Hospital_Interfaces_IRepository_1_GetByIdAsync_System_String_
  - name: (
  - uid: System.String
    name: String
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.string
  - name: )
- uid: System.Threading.Tasks.Task{{T}}
  commentId: T:System.Threading.Tasks.Task{`0}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  name: Task<T>
  nameWithType: Task<T>
  fullName: System.Threading.Tasks.Task<T>
  nameWithType.vb: Task(Of T)
  fullName.vb: System.Threading.Tasks.Task(Of T)
  name.vb: Task(Of T)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  - name: <
  - name: T
  - name: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
- uid: Hospital.Interfaces.IRepository`1.GetByIdAsync(System.String)
  commentId: M:Hospital.Interfaces.IRepository`1.GetByIdAsync(System.String)
  isExternal: true
  href: Hospital.Interfaces.IRepository-1.html#Hospital_Interfaces_IRepository_1_GetByIdAsync_System_String_
  name: GetByIdAsync(string)
  nameWithType: IRepository<T>.GetByIdAsync(string)
  fullName: Hospital.Interfaces.IRepository<T>.GetByIdAsync(string)
  nameWithType.vb: IRepository(Of T).GetByIdAsync(String)
  fullName.vb: Hospital.Interfaces.IRepository(Of T).GetByIdAsync(String)
  name.vb: GetByIdAsync(String)
  spec.csharp:
  - uid: Hospital.Interfaces.IRepository`1.GetByIdAsync(System.String)
    name: GetByIdAsync
    href: Hospital.Interfaces.IRepository-1.html#Hospital_Interfaces_IRepository_1_GetByIdAsync_System_String_
  - name: (
  - uid: System.String
    name: string
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.string
  - name: )
  spec.vb:
  - uid: Hospital.Interfaces.IRepository`1.GetByIdAsync(System.String)
    name: GetByIdAsync
    href: Hospital.Interfaces.IRepository-1.html#Hospital_Interfaces_IRepository_1_GetByIdAsync_System_String_
  - name: (
  - uid: System.String
    name: String
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.string
  - name: )
- uid: Hospital.Repositories.BaseRepository`1.UpdateAsync*
  commentId: Overload:Hospital.Repositories.BaseRepository`1.UpdateAsync
  href: Hospital.Repositories.BaseRepository-1.html#Hospital_Repositories_BaseRepository_1_UpdateAsync_System_String__0_
  name: UpdateAsync
  nameWithType: BaseRepository<T>.UpdateAsync
  fullName: Hospital.Repositories.BaseRepository<T>.UpdateAsync
  nameWithType.vb: BaseRepository(Of T).UpdateAsync
  fullName.vb: Hospital.Repositories.BaseRepository(Of T).UpdateAsync
- uid: Hospital.Interfaces.IRepository{{T}}.UpdateAsync(System.String,{T})
  commentId: M:Hospital.Interfaces.IRepository{`0}.UpdateAsync(System.String,`0)
  parent: Hospital.Interfaces.IRepository{{T}}
  definition: Hospital.Interfaces.IRepository`1.UpdateAsync(System.String,`0)
  href: Hospital.Interfaces.IRepository-1.html#Hospital_Interfaces_IRepository_1_UpdateAsync_System_String__0_
  name: UpdateAsync(string, T)
  nameWithType: IRepository<T>.UpdateAsync(string, T)
  fullName: Hospital.Interfaces.IRepository<T>.UpdateAsync(string, T)
  nameWithType.vb: IRepository(Of T).UpdateAsync(String, T)
  fullName.vb: Hospital.Interfaces.IRepository(Of T).UpdateAsync(String, T)
  name.vb: UpdateAsync(String, T)
  spec.csharp:
  - uid: Hospital.Interfaces.IRepository{`0}.UpdateAsync(System.String,`0)
    name: UpdateAsync
    href: Hospital.Interfaces.IRepository-1.html#Hospital_Interfaces_IRepository_1_UpdateAsync_System_String__0_
  - name: (
  - uid: System.String
    name: string
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.string
  - name: ','
  - name: " "
  - name: T
  - name: )
  spec.vb:
  - uid: Hospital.Interfaces.IRepository{`0}.UpdateAsync(System.String,`0)
    name: UpdateAsync
    href: Hospital.Interfaces.IRepository-1.html#Hospital_Interfaces_IRepository_1_UpdateAsync_System_String__0_
  - name: (
  - uid: System.String
    name: String
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.string
  - name: ','
  - name: " "
  - name: T
  - name: )
- uid: System.Threading.Tasks.Task
  commentId: T:System.Threading.Tasks.Task
  parent: System.Threading.Tasks
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task
  name: Task
  nameWithType: Task
  fullName: System.Threading.Tasks.Task
- uid: Hospital.Interfaces.IRepository`1.UpdateAsync(System.String,`0)
  commentId: M:Hospital.Interfaces.IRepository`1.UpdateAsync(System.String,`0)
  isExternal: true
  href: Hospital.Interfaces.IRepository-1.html#Hospital_Interfaces_IRepository_1_UpdateAsync_System_String__0_
  name: UpdateAsync(string, T)
  nameWithType: IRepository<T>.UpdateAsync(string, T)
  fullName: Hospital.Interfaces.IRepository<T>.UpdateAsync(string, T)
  nameWithType.vb: IRepository(Of T).UpdateAsync(String, T)
  fullName.vb: Hospital.Interfaces.IRepository(Of T).UpdateAsync(String, T)
  name.vb: UpdateAsync(String, T)
  spec.csharp:
  - uid: Hospital.Interfaces.IRepository`1.UpdateAsync(System.String,`0)
    name: UpdateAsync
    href: Hospital.Interfaces.IRepository-1.html#Hospital_Interfaces_IRepository_1_UpdateAsync_System_String__0_
  - name: (
  - uid: System.String
    name: string
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.string
  - name: ','
  - name: " "
  - name: T
  - name: )
  spec.vb:
  - uid: Hospital.Interfaces.IRepository`1.UpdateAsync(System.String,`0)
    name: UpdateAsync
    href: Hospital.Interfaces.IRepository-1.html#Hospital_Interfaces_IRepository_1_UpdateAsync_System_String__0_
  - name: (
  - uid: System.String
    name: String
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.string
  - name: ','
  - name: " "
  - name: T
  - name: )
- uid: Hospital.Repositories.BaseRepository`1.DeleteAsync*
  commentId: Overload:Hospital.Repositories.BaseRepository`1.DeleteAsync
  href: Hospital.Repositories.BaseRepository-1.html#Hospital_Repositories_BaseRepository_1_DeleteAsync_System_String_
  name: DeleteAsync
  nameWithType: BaseRepository<T>.DeleteAsync
  fullName: Hospital.Repositories.BaseRepository<T>.DeleteAsync
  nameWithType.vb: BaseRepository(Of T).DeleteAsync
  fullName.vb: Hospital.Repositories.BaseRepository(Of T).DeleteAsync
- uid: Hospital.Interfaces.IRepository{{T}}.DeleteAsync(System.String)
  commentId: M:Hospital.Interfaces.IRepository{`0}.DeleteAsync(System.String)
  parent: Hospital.Interfaces.IRepository{{T}}
  definition: Hospital.Interfaces.IRepository`1.DeleteAsync(System.String)
  href: Hospital.Interfaces.IRepository-1.html#Hospital_Interfaces_IRepository_1_DeleteAsync_System_String_
  name: DeleteAsync(string)
  nameWithType: IRepository<T>.DeleteAsync(string)
  fullName: Hospital.Interfaces.IRepository<T>.DeleteAsync(string)
  nameWithType.vb: IRepository(Of T).DeleteAsync(String)
  fullName.vb: Hospital.Interfaces.IRepository(Of T).DeleteAsync(String)
  name.vb: DeleteAsync(String)
  spec.csharp:
  - uid: Hospital.Interfaces.IRepository{`0}.DeleteAsync(System.String)
    name: DeleteAsync
    href: Hospital.Interfaces.IRepository-1.html#Hospital_Interfaces_IRepository_1_DeleteAsync_System_String_
  - name: (
  - uid: System.String
    name: string
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.string
  - name: )
  spec.vb:
  - uid: Hospital.Interfaces.IRepository{`0}.DeleteAsync(System.String)
    name: DeleteAsync
    href: Hospital.Interfaces.IRepository-1.html#Hospital_Interfaces_IRepository_1_DeleteAsync_System_String_
  - name: (
  - uid: System.String
    name: String
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.string
  - name: )
- uid: Hospital.Interfaces.IRepository`1.DeleteAsync(System.String)
  commentId: M:Hospital.Interfaces.IRepository`1.DeleteAsync(System.String)
  isExternal: true
  href: Hospital.Interfaces.IRepository-1.html#Hospital_Interfaces_IRepository_1_DeleteAsync_System_String_
  name: DeleteAsync(string)
  nameWithType: IRepository<T>.DeleteAsync(string)
  fullName: Hospital.Interfaces.IRepository<T>.DeleteAsync(string)
  nameWithType.vb: IRepository(Of T).DeleteAsync(String)
  fullName.vb: Hospital.Interfaces.IRepository(Of T).DeleteAsync(String)
  name.vb: DeleteAsync(String)
  spec.csharp:
  - uid: Hospital.Interfaces.IRepository`1.DeleteAsync(System.String)
    name: DeleteAsync
    href: Hospital.Interfaces.IRepository-1.html#Hospital_Interfaces_IRepository_1_DeleteAsync_System_String_
  - name: (
  - uid: System.String
    name: string
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.string
  - name: )
  spec.vb:
  - uid: Hospital.Interfaces.IRepository`1.DeleteAsync(System.String)
    name: DeleteAsync
    href: Hospital.Interfaces.IRepository-1.html#Hospital_Interfaces_IRepository_1_DeleteAsync_System_String_
  - name: (
  - uid: System.String
    name: String
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.string
  - name: )
- uid: Hospital.Repositories.BaseRepository`1.DeleteByIdAsync*
  commentId: Overload:Hospital.Repositories.BaseRepository`1.DeleteByIdAsync
  href: Hospital.Repositories.BaseRepository-1.html#Hospital_Repositories_BaseRepository_1_DeleteByIdAsync_System_String_
  name: DeleteByIdAsync
  nameWithType: BaseRepository<T>.DeleteByIdAsync
  fullName: Hospital.Repositories.BaseRepository<T>.DeleteByIdAsync
  nameWithType.vb: BaseRepository(Of T).DeleteByIdAsync
  fullName.vb: Hospital.Repositories.BaseRepository(Of T).DeleteByIdAsync
